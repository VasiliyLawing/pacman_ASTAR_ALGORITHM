package level2v3.unit6.tasks

import com.anysolo.toyGraphics.*
import kotlin.math.roundToInt
import kotlin.random.Random


private data class Thingy(var x: Double, var y: Double, var speedX: Double, var speedY: Double, var underFireCounter: Int)


private fun drawRays(gc: Graphics, targets: List<Thingy>, thingySize: Int, platformX: Int, platformY: Int) {
    gc.color = Pal16.brightRed

    for (t in targets) {
        gc.drawLine(platformX, platformY, t.x.roundToInt() + thingySize/2, t.y.roundToInt() + thingySize/2)
    }
}


private fun drawTargetArea(gc: Graphics, left: Int) {
    val wnd = gc.window

    gc.color = Pal16.darkGray
    gc.drawLine(left, 0, left, wnd.height - 1)
}


private fun hitTargets(targets: List<Thingy>) {
    for (t in targets) {
        t.underFireCounter++
    }
}


private fun addNewThingiesIfNeeded(thingies: MutableList<Thingy>, windowHeight: Int) {
    if(Random.nextInt(0, 25) == 0) {
        // todo create a new thingy.
    }
}


private fun drawAndMoveThigies(gc: Graphics, thingies: List<Thingy>) {
    gc.color = Pal16.green
    for (thingy in thingies) {
        gc.drawRect(thingy.x.roundToInt(), thingy.y.roundToInt(), 10, 10, fill = true)
        thingy.x += thingy.speedX
        thingy.y += thingy.speedY
    }
}

private fun drawPlatform(gc: Graphics, x: Int, y: Int, width: Int, height: Int) {
    gc.color = Pal16.blue
    gc.drawRect(x, y, width, height, fill = true)
}


fun task2() {
    val wnd = Window(800, 600, buffered = true, background = Pal16.black)
    val thingySize = 10

    val thingies = mutableListOf<Thingy>()

    val targetAreaLeft = wnd.width/3
    val platformWidth = 20
    val platformHeight = 7
    val platformX = wnd.width/2
    val platformY = wnd.height - platformHeight

    while (true) {
        addNewThingiesIfNeeded(thingies, wnd.height)

        val gc = Graphics(wnd)
        gc.clear()

        drawAndMoveThigies(gc, thingies)
        drawTargetArea(gc, targetAreaLeft)

        // todo select thingies with x > targetAreaLeft
        val targetedThingies = 
            
        drawRays(gc, targetedThingies, thingySize, platformX + platformWidth/2, platformY)
        drawPlatform(gc, platformX, platformY, platformWidth, platformHeight)

        gc.close()

        hitTargets(targetedThingies)

        // todo remove all thingies with underFireCounter > 50

        sleep(10)
    }
}

fun main() = task2()
